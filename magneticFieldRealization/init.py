import numpy as np

from conversions import *
# IF - ИСК, BF - ССК, OF - ОСК

# параметры моделирования
dt = float(0.1) # шаг моделирования РК4
tFinal = 50.0 # время моделирования
t = np.arange(0.0, tFinal, dt) # массив эпох

# экваториальный радиус Земли
Re = 6378.137 * 1e3 # м
# орбитальные элементы для задания начальных данных r, v
a0 = Re + 500 # большая полуось (m)
ecc0 = 0.0 # эксцентреситет - круговая орбита
trueAnomaly0 = 15 # истинная аномалия
raan0 = 30 # долгота восходящего узла
inc0 = 0  # наклонение
aop0 = 0 # аргумент перицентра

# гравитационный параметр
mu = 398600.4418 * 1e14 # m^3 / sec^2

# вектор прямого магнитного диполя Земли в ИСК
kDirectIF = np.array([0, 0, -1], dtype=float)

# модуль вектора магнитного дипольного момента Земли
M = 7.8e22 # A * м^2

# собственный магнитный дипольный момент КА
satMagnMomentOF = np.array([0, 0.1, 0], dtype=float) # A*m^2
# тензор инерции
Jtense = np.diag([2.0, 2.0, 1.0])# кг*м^2

# получаем начальные радиус-вектор и скорость в ИСО
[rIF0, velIF0] = orbital2Cartesian(a0, ecc0, trueAnomaly0, raan0, inc0, aop0, mu)

# кватернион ориентации, задаёт переход из ИСК в ССК
quat0 = np.array([1.0, 0, 0, 0], dtype= float)

# полная угловая скорость в ССК в начальный момент
omegaBF0 = np.array([0.001, 0.001, 0.001], dtype=float) # рад/с

# начальный фазовый вектор [rx, ry, rx, vx, vy, vz, q0, qi, qj, qk, omega1, omega2, omega3]
phaseVec = np.array([*rIF0, *velIF0, *quat0, *omegaBF0], dtype=float)

# сидерический период Земли
tauE = 23 * 60 * 60 + 56 * 60 + 4 # сек
# угловая скорость вращения Земли
omegaE = 2 * np.pi / tauE
# Начальная долгота
phi0 = np.deg2rad(0.0)
# начальная широта
delta0 = np.deg2rad(20.0)


